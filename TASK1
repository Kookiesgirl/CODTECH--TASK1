from flask import Flask, request, render_template_string
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

app = Flask(__name__)

# Load the Boston Housing dataset
from sklearn.datasets import load_boston
boston = load_boston()
X = pd.DataFrame(boston.data, columns=boston.feature_names)
y = pd.Series(boston.target)

# Prepare the dataset
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train the model
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

# HTML and CSS for the interface
html_code = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Housing Price Prediction</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
        }

        .container {
            width: 50%;
            margin: 50px auto;
            background-color: #fff;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        form {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 10px;
            font-weight: bold;
        }

        input {
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        button {
            background-color: #4CAF50;
            color: white;
            padding: 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Predict Housing Prices</h1>
        <form action="/predict" method="POST">
            <label for="square_feet">Square Footage:</label>
            <input type="number" id="square_feet" name="square_feet" required>

            <label for="bedrooms">Number of Bedrooms:</label>
            <input type="number" id="bedrooms" name="bedrooms" required>

            <label for="location">Location (e.g., suburb, city):</label>
            <input type="text" id="location" name="location" required>

            <button type="submit">Predict Price</button>
        </form>
    </div>
</body>
</html>
'''

@app.route('/')
def index():
    return render_template_string(html_code)

@app.route('/predict', methods=['POST'])
def predict():
    try:
        square_feet = float(request.form['square_feet'])
        bedrooms = int(request.form['bedrooms'])
        location = request.form['location']  # Placeholder for more features

        # Simplified feature extraction (add more features as needed)
        feature_input = np.array([[square_feet, bedrooms]])  # Replace with proper feature encoding
        feature_input_scaled = scaler.transform(feature_input)

        # Make prediction
        prediction = model.predict(feature_input_scaled)
        predicted_price = prediction[0]

        return f"<h1>Predicted Price: ${predicted_price:.2f}</h1>"
    
    except Exception as e:
        return f"<h1>Error: {str(e)}</h1>"

if __name__ == '__main__':
    app.run(debug=True)
